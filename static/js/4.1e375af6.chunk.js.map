{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.jsx","components/Dialogs/Dialogitem/Dialogitem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","Textarea","Element","onSubmit","handleSubmit","Field","component","validate","required","placeholder","Dialogs","dialogsPage","dialogsElement","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,+ICGxIC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,iLAGnC,OAAIC,KAAKC,MAAMN,OACR,kBAACG,EAAcE,KAAKC,OADG,kBAAC,IAAD,CAAUC,GAAI,eAHT,GACXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCH9DM,EATI,SAACJ,GAClB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACE,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC/B,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCEjBC,EAPC,SAACZ,GAEf,OACE,yBAAKO,UAAWC,IAAEK,SAAUb,EAAMa,U,yCC0BhCC,EAAeC,YAAiB,KAgBhCC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACjB,GACtB,IAAMmB,EAAWC,YAAQ,YACzB,OACI,0BAAMC,SAAUrB,EAAMsB,cACpB,6BACE,kBAACC,EAAA,EAAD,CAAOZ,KAAK,iBAAiBa,UAAWL,EAAUM,SAAU,CAACC,IAAUZ,GAAgBa,YAAY,wBAErG,6BACE,iDAQKC,EAzCC,SAAC5B,GACf,IAAKP,EAAQO,EAAM6B,YACfC,EAAiBrC,EAAMsC,QAAQC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QACrF6B,EAAmB1C,EAAM2C,SAASJ,KAAI,SAACK,GAAD,OAAO,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE/B,GAAIA,GAAI+B,EAAE/B,QAM/F,OAAIN,EAAMN,OAER,yBAAKa,UAAWC,IAAEuB,SAChB,yBAAKxB,UAAWC,IAAE8B,cACdR,GAEJ,yBAAKvB,UAAWC,IAAE4B,UAChB,6BAAOD,GACP,kBAACnB,EAAD,CAAqBK,SAZL,SAACkB,GACrBvC,EAAMwC,YAAYD,EAAOE,qBAGF,kBAAC,IAAD,CAAUxC,GAAI,Y,wBCG1ByC,sBACbvC,aAdsB,SAACV,GACvB,MAAO,CACLoC,YAAapC,EAAMoC,gBAGI,SAACc,GAC1B,MAAO,CACLH,YAAa,SAACC,GACZE,EAASC,YAAmBH,SAOhC7C,IAFa8C,CAGbd","file":"static/js/4.1e375af6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2H2OL\",\"dialogsItems\":\"Dialogs_dialogsItems__3kRDL\",\"active\":\"Dialogs_active__10YjM\",\"messages\":\"Dialogs_messages__1Fy6S\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst DialogItem = (props) => {\n  let path = '/dialogs/' + props.id;\n  return (\n    <div className={`${s.dialog} ${s.active}`}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n  \n  return (\n    <div className={s.message}>{props.message}</div>\n  );\n};\n\nexport default Message;\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from './Dialogitem/Dialogitem';\nimport Message from './Message/Message';\nimport { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form'\nimport { Element } from '../common/FormControls/FormControls';\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\n\nconst Dialogs = (props) => {\n  let  state = props.dialogsPage;\n  let dialogsElement = state.dialogs.map((d) => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n  let messagesElements = state.messages.map((m) => <Message message={m.message} key={m.id} id={m.id} />);\n\n  const addNewMessage = (values) => {\n    props.sendMessage(values.newMessageBody);\n  }\n\n  if(!props.isAuth) return <Redirect to={'/login'} />\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>\n        { dialogsElement }\n      </div>\n      <div className={s.messages}>\n        <div>{ messagesElements }</div>\n        <AddMessageFormRedux onSubmit={addNewMessage} />\n      </div>\n    </div>\n  );\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst AddMessageForm = (props) => {\n  const Textarea = Element('textarea');\n  return (\n      <form onSubmit={props.handleSubmit}>\n        <div>\n          <Field name='newMessageBody' component={Textarea} validate={[required, maxLength100]}  placeholder='Enter Your message' />\n        </div>\n        <div>\n          <button>Add Post</button>\n        </div>\n      </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\n\nexport default Dialogs;\n","import React from 'react';\nimport {sendMessageCreator} from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\n// import StoreContext from '../../storeContext';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    }\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}