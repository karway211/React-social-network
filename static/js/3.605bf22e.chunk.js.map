{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Posts.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataRedaxForm","reduxForm","form","handleSubmit","profile","error","Input","Element","Textarea","className","s","description","onSubmit","style","formSammaryError","createField","type","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAGob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","avatar","src","photos","large","photo","alt","target","files","length","initialValues","formData","then","Posts","console","log","message","item","blockPost","likesCount","likeCount","MyPosts","memo","postsElement","posts","p","postsBlock","AddMyPostsFormRedux","values","addPost","newPostText","maxLength10","maxLengthCreator","Field","name","validate","required","component","placeholder","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.605bf22e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__3db7F\",\"item\":\"ProfileInfo_item__1Smry\",\"contact\":\"ProfileInfo_contact__27xyW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__3Ld_J\",\"postsBlock\":\"MyPosts_postsBlock__eXSfj\",\"way\":\"MyPosts_way__3ymh5\",\"posts\":\"MyPosts_posts__2Cn8s\",\"avatar\":\"MyPosts_avatar__1P5NN\",\"item\":\"MyPosts_item__1cUMx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockPost\":\"Posts_blockPost__3BvhH\",\"likesCount\":\"Posts_likesCount__2yvWw\"};","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = props => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      { !editMode &&\r\n        <div>\r\n          <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n        </div>\r\n      }\r\n      { editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status} />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { createField, Element } from '../../common/FormControls/FormControls';\r\nimport s from './ProfileInfo.module.css';\r\nimport style from './../../../components/common/FormControls/FormControls.module.css'\r\n\r\nimport { reduxForm } from 'redux-form';\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n  const Input = Element('input');\r\n  const Textarea = Element('textarea');\r\n  return (\r\n    <form className={s.description} onSubmit={handleSubmit}>\r\n      <div><button>save</button></div>\r\n      {error && <div className={style.formSammaryError}>\r\n          {error}\r\n        </div>}\r\n      <div>\r\n        <b>Full name</b>: {createField('Full name', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>: { createField('My professional skills', 'lookingForAJobDescription', [], Textarea) }\r\n      </div>\r\n      <div>\r\n        <b>About me</b>: { createField('About me', 'aboutMe', [], Textarea) }\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\r\n          return <div key={key} className={s.contact}>\r\n            <b>{key}: </b>{createField(key, `contacts.${key}`, [], Input)}\r\n          </div>\r\n        })}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataRedaxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataRedaxForm;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport photo from '../../../assets/images/photo.png'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n// import ReactPhoto from '../../../assets/images/React-icon.png';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if(!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = e => {\r\n    if(e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n    return (\r\n      <div>\r\n        {/* <div className={s.way}>\r\n          <img src={ReactPhoto} alt=\"img\"/>\r\n        </div> */}\r\n        <div className={s.avatar}>\r\n          <div>\r\n            <img src={profile.photos.large || photo} alt=\"img\"/>\r\n            <div>\r\n              {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            {editMode\r\n              ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n              : <ProfileData goToEditMode={() => {setEditMode(true)}} isOwner={isOwner} profile={profile} />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n  return (\r\n    <div className={s.description}>\r\n      {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAGob &&\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{Object.keys(profile.contacts).map(key => {\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n  return <div className={s.contact}>\r\n    <b>{contactTitle}</b>: {contactValue}\r\n  </div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\nimport s from './Posts.module.css';\n\nconst Posts = (props) => {\n  console.log(props.message);\n    return (\n          <div className={s.item}>\n            <div className={s.blockPost}>\n              <img src='https://toppng.com/uploads/preview/batman-icon-jira-avatar-11562897771zvwv8r510z.png' alt='avatar'/>\n              { props.message }\n            </div>\n            <div className={s.likesCount}>\n              <span>{ props.likeCount }</span><img src=\"http://pngimg.com/uploads/like/like_PNG84.png\" alt=\"like\"/>\n            </div>\n          </div>\n    );\n};\n\nexport default Posts;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from './Post/Posts';\nimport { Field, reduxForm } from 'redux-form'\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\nimport { Element } from '../../common/FormControls/FormControls';\n\nconst MyPosts = React.memo((props) => {\n\n  let postsElement = props.posts.map((p) => <Posts message={p.message} likeCount={p.likesCount} />);\n\n  const onAddPost = (values) => {\n    props.addPost(values.newPostText);\n  }\n\n    return (\n      <div className={s.postsBlock}>\n        <h3>My posts</h3>\n        <AddMyPostsFormRedux onSubmit={onAddPost} />\n        <div className={s.posts}>\n          { postsElement }\n        </div>\n      </div>\n    );\n});\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddNewPostsForm = (props) => {\n  const Textarea = Element('textarea');\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field name='newPostText' validate={[required, maxLength10]} component={Textarea} placeholder='Enter Your post' />\n      </div>\n      <div>\n        <button>Add Post</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMyPostsFormRedux = reduxForm({form: 'ProfileAddNewPostsForm'})(AddNewPostsForm);\n\nexport default MyPosts;\n","import React from 'react';\nimport MyPosts from './MyPosts';\nimport {addPostActionCreator} from './../../../redux/profile-reducer';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React from 'react';\n// import s from './Profile.module.css';\n// import MyPosts from './MyPosts/MyPosts';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\nconst Profile = (props) => {\n\n    return (\n      <div>\n        <ProfileInfo isOwner={props.isOwner}\n                    profile={ props.profile }\n                    status={props.status}\n                    updateStatus={props.updateStatus}\n                    savePhoto={props.savePhoto}\n                    saveProfile={props.saveProfile} />\n        <MyPostsContainer />\n      </div>\n    );\n};\n\nexport default Profile;\n","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, updateStatus, getStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport { ProfileType } from '../../types/types';\n\n// type MapStatePropsType = {\n//   profile: ProfileType\n//   status: string\n//   authorizedUserId: number | null\n//   isAuth: boolean\n// }\n// type MapDispatchPropsType = {\n//   getUserProfile: (userId: number | null) => void\n//   getStatus: (userId: number) => void\n//   updateStatus: (newStatus: string) => void\n//   savePhoto: string\n//   saveProfile: null as ProfileType | null,\n\n// }\n// type OwnPropsType = {\n// }\n\n// type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n      if(!userId) {\n        this.props.history.push('/login');\n      }\n    }\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n  componentDidMount() {\n    this.refreshProfile();\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    \n    return (\n      <Profile { ...this.props }\n              profile={ this.props.profile }\n              status={this.props.status}\n              updateStatus={this.props.updateStatus}\n              isOwner={!this.props.match.params.userId}\n              savePhoto={this.props.savePhoto}\n              saveProfile={this.props.saveProfile} />\n    );\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n  withRouter,\n  // withAuthRedirect\n)(ProfileContainer);\n"],"sourceRoot":""}