{"version":3,"sources":["assets/images/photo.png","api/api.ts","redux/dialogs-reducer.ts","assets/images/Spin.svg","components/common/Preloader/Preloader.module.css","assets/images/React-icon.png","components/Navbar/Navbar.module.css","serviceWorker.js","components/Header/Header.jsx","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.jsx","App.js","index.js","components/common/Preloader/Preloader.js","components/common/FormControls/FormControls.tsx","components/Users/Users.module.css","components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","components/common/paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["module","exports","ResultCodesEnum","ResultCodeForCaptcha","instance","Axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","response","data","unfollow","id","delete","follow","post","getProfile","userId","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","getMe","then","login","email","password","rememberMe","captcha","logaut","securityAPI","getCaptchaUrl","initialState","dialogs","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","Boolean","window","location","hostname","match","Header","props","className","s","header","src","alt","loginBlock","isAuth","onClick","to","captchaUrl","setAuthUserData","payload","getCaptchaUrlSucces","getAuthUserData","dispatch","a","meData","resultCode","Success","url","authReducer","HeaderContainer","this","React","Component","connect","auth","Navbar","nav","item","activeClassName","active","News","Music","Settings","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFollowingProgress","setUsers","setCurrentPage","setTotalUsersCount","count","toggleIsFetching","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","filter","Paginator","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","p","cn","selectedPage","pageNumber","key","e","User","user","userWrapper","photos","small","userPhoto","usersPhoto","disabled","some","Users","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","pageTitle","Preloader","compose","bind","page","getState","totalCount","LoginReduxForm","reduxForm","form","handleSubmit","error","Input","Element","onSubmit","createField","required","undefined","formSammaryError","loginData","CaptchaIsRequired","length","stopSubmit","_error","log","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","app","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","__store__","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","initializedApp","exact","path","render","ReactPhoto","AppContainer","withRouter","promise","Promise","all","MyJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","input","meta","touched","hasError","formControl","plaseholder","validators","component","text","placeholder","validate","value","maxLengthCreator","maxLength","posts","addPostActionCreator","newPostText","setStatus","getUserProfile","title","reject","newPost","likesCount","postId"],"mappings":"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","file":"static/js/main.78f792df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.67d30f6f.png\";","import Axios from \"axios\";\r\nimport { ProfileType } from \"../types/types\";\r\n\r\nconst instance = Axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"f9529b93-30b8-4394-b072-ee0546f292c2\"\r\n    }\r\n});\r\n\r\n\r\nexport const usersAPI = {\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        const response = await instance.get(`users?page=${currentPage}&count=${pageSize}`);\r\n        return response.data;\r\n    },\r\n    async unfollow(id: number) {\r\n        const response = await instance.delete(`follow/${id}`);\r\n        return response.data;\r\n    },\r\n    async follow(id: number) {\r\n        const response = await instance.post(`follow/${id}`);\r\n        return response.data;\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n        // return instance.get(`profile/${userId}`)\r\n    }\r\n};\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile);\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile);\r\n    }\r\n};\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {id: number, email: string, login: string}\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {userId: number}\r\n    resultCode: ResultCodeForCaptcha | ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    getMe(){\r\n       return instance.get<MeResponseType>(`auth/me`).then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n        .then(response => response.data);\r\n    },\r\n    logaut() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};\r\nexport const securityAPI = {\r\n    getCaptchaUrl(){\r\n       return instance.get(`security/get-captcha-url`);\r\n    }\r\n};\r\n","const SEND_MESSAGE = 'SEND-MESSAGE';\n\ntype DialogType = {\n  id: number\n  name: string\n}\n\ntype MessageType = {\n  id: number\n  message: string\n}\n\nlet initialState = {\n  dialogs: [\n    {id: 1, name: 'Andrey'},\n    {id: 2, name: 'Dima'},\n    {id: 3, name: 'Sveta'},\n    {id: 4, name: 'Valera'},\n    {id: 5, name: 'Victor'},\n    {id: 6, name: 'Sasha'}\n  ] as Array<DialogType>,\n\n  messages: [\n    {id: 1, message: 'Hi'},\n    {id: 2, message: 'How are you'},\n    {id: 3, message: 'Yo'},\n    {id: 4, message: 'Yo'},\n    {id: 5, message: 'Yo'},\n    {id: 6, message: 'Yo'}\n  ] as Array<MessageType>,\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst dialogsReducer = (state = initialState, action: any): InitialStateType => {\n\n  switch(action.type) {\n    \n    case SEND_MESSAGE:\n      let message = action.newMessageBody;\n      return {\n        ...state,\n        messages: [...state.messages, {id: 7, message}]\n      };\n    default:\n      return state;\n  }\n  \n};\n\ntype sendMessageCreatorActionType = {\n  type: typeof SEND_MESSAGE\n  newMessageBody: string\n}\n\nexport const sendMessageCreator = (newMessageBody: string): sendMessageCreatorActionType => ({ type: SEND_MESSAGE, newMessageBody });\n\nexport default dialogsReducer;\n","module.exports = __webpack_public_path__ + \"static/media/Spin.1336a69b.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__1yHYn\"};","module.exports = __webpack_public_path__ + \"static/media/React-icon.31987a52.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2xKqi\",\"item\":\"Navbar_item__15XME\",\"active\":\"Navbar_active__bEgna\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = (props) => {\n    return (\n      <header className={s.header}>\n        <img src='http://pngimg.com/uploads/owl/owl_PNG45.png' alt=\"logo\"/>\n\n        <div className={ s.loginBlock }>\n          { props.isAuth \n          ? <div> {props.login} - <button onClick={props.logaut}>Log aut</button> </div>\n          : <NavLink to='/login'>Login</NavLink> }\n          \n        </div>\n      </header>\n    );\n};\n\nexport default Header;\n","import { stopSubmit } from 'redux-form';\nimport { authAPI, securityAPI, ResultCodesEnum, ResultCodeForCaptcha } from \"../api/api\";\n\n\nconst   SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n  userId: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isAuth: false as boolean,\n  captchaUrl: null as string | null\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst authReducer = (state = initialState, action: any):InitialStateType => {\n  switch(action.type) {\n    case GET_CAPTCHA_URL_SUCCESS:\n    case SET_USER_DATA:\n      return {\n        userId : 'rhrthrht',\n        ...state,\n        ...action.payload\n      }\n    default:\n      return state;\n  }\n\n}\n\n//ac\ntype SetAuthUserDataActionPayloadType = {\n  userId: number | null\n  login: string | null\n  email: string | null\n  isAuth: boolean\n}\ntype SetAuthUserDataActionType = {\n  type: typeof SET_USER_DATA\n  payload: SetAuthUserDataActionPayloadType\n}\nexport const setAuthUserData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\n  type: SET_USER_DATA, payload: { userId, login, email, isAuth }\n});\n\n\ntype GetCaptchaUrlSuccesActionType = {\n  type: typeof GET_CAPTCHA_URL_SUCCESS\n  payload: {captchaUrl: string} // это {} у которого captchaUrl - строка\n}\nexport const getCaptchaUrlSucces = (captchaUrl: string): GetCaptchaUrlSuccesActionType => ({type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}});\n\n//thunk\nexport const getAuthUserData = () => async (dispatch: any) => {\n  const meData = await authAPI.getMe()\n    if(meData.resultCode === ResultCodesEnum.Success) {\n      let {id, login, email} = meData.data;\n      dispatch(setAuthUserData(id, login, email, true));\n    }\n};\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\n  const loginData = await authAPI.login(email, password, rememberMe, captcha);\n  if(loginData.resultCode === ResultCodesEnum.Success) {\n    dispatch(getAuthUserData());\n  } else {\n    if(loginData.resultCode === ResultCodeForCaptcha.CaptchaIsRequired){\n      dispatch(getCaptchaUrl());\n    }\n    const message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error';\n    dispatch(stopSubmit('contact', {_error: message}))\n  }\n};\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl =  response.data.url;\n  dispatch(getCaptchaUrlSucces(captchaUrl));\n};\n\nexport const logaut = () => async (dispatch: any) => {\n  const response = await authAPI.logaut();\n  if(response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\n\n\nexport default authReducer;\n","import React from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { logaut } from '../../redux/auth-reducer';\n// import { authAPI } from '../../api/api';\n\nclass HeaderContainer extends React.Component {\n\n  render() {\n    return <Header { ...this.props } />\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login\n});\n\nexport default connect(mapStateToProps, {logaut})(HeaderContainer);\n","import React from 'react';\nimport s from './Navbar.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => {\n  return (\n    <nav className={s.nav}>\n      <div className={`${s.item}`}>\n        <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar;\n","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;\r\n","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n  return items.map(u => {\r\n    if (u[objPropName] === itemId) {\r\n      return {...u, ...newObjProps}\r\n    }\r\n    return u;\r\n  });\r\n};\r\n","import { AppStateType } from './redux-store';\nimport { PhotosType, UserType } from './../types/types';\nimport { usersAPI } from \"../api/api\";\nimport { updateObjectInArray } from \"../utils/object-helpers\";\nimport { ThunkAction } from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET-USERS';\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS'\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: [] as Array<number> // Array of users Id\n};\n\ntype InitialStateType = typeof initialState;\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })\n        // users: state.users.map(u => u) && users: [...state.users] - записи идентичны\n        // users: state.users.map(u => {\n        //   if (u.id === action.userId) {\n        //     return {...u, followed: true}\n        //   }\n        //   return u;\n        // })\n      }\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', { followed: false })\n        // users: state.users.map(u => u) && users: [...state.users] - записи идентичны\n        // users: state.users.map(u => {\n        //   if (u.id === action.userId) {\n        //     return {...u, followed: false}\n        //   }\n        //   return u;\n        // })\n      }\n    case SET_USERS: {\n      return { ...state, users: action.users }\n    }\n    case SET_CURRENT_PAGE: {\n      return { ...state, currentPage: action.currentPage }\n    }\n    case SET_TOTAL_USERS_COUNT: {\n      return { ...state, totalUsersCount: action.count }\n    }\n    case TOGGLE_IS_FETCHING: {\n      return { ...state, isFetching: action.isFetching }\n    }\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter(id => id !== action.userId)\n      }\n    }\n    default:\n      return state;\n  }\n\n}\n// ActionCreator\ntype ActionsTypes = FollowSuccessActionType | UnfollowSuccessActionType | ToggleIsFollowingProgressActionType\n  | SetUsersActionType | SetCurrentPageActionType | SetTotalUsersCountActionType | ToggleIsFetchingActionType\n\ntype FollowSuccessActionType = {\n  type: typeof FOLLOW\n  userId: number\n}\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({ type: FOLLOW, userId });\n\ntype UnfollowSuccessActionType = {\n  type: typeof UNFOLLOW\n  userId: number\n}\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({ type: UNFOLLOW, userId });\n\ntype ToggleIsFollowingProgressActionType = {\n  type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\n  isFetching: boolean\n  userId: number\n}\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressActionType => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId });\n\ntype SetUsersActionType = {\n  type: typeof SET_USERS\n  users: Array<UserType>\n}\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({ type: SET_USERS, users });\n\ntype SetCurrentPageActionType = {\n  type: typeof SET_CURRENT_PAGE\n  currentPage: number\n}\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({ type: SET_CURRENT_PAGE, currentPage });\n\ntype SetTotalUsersCountActionType = {\n  type: typeof SET_TOTAL_USERS_COUNT\n  count: number\n}\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({ type: SET_TOTAL_USERS_COUNT, count: totalUsersCount });\n\ntype ToggleIsFetchingActionType = {\n  type: typeof TOGGLE_IS_FETCHING\n  isFetching: boolean\n}\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({ type: TOGGLE_IS_FETCHING, isFetching });\n\n//thunk\ntype DispatchType = Dispatch<ActionsTypes>\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\nexport const requestUsers = (page = 1,  //создатель санки\n  pageSize: number): ThunkType => {\n  return async (dispatch, getState) => {\n    dispatch(toggleIsFetching(true));//диспатчим экшен-крейтер\n    dispatch(setCurrentPage(page));\n\n    const data = await usersAPI.getUsers(page, pageSize);\n\n    dispatch(toggleIsFetching(false)); //диспатчим экшен-крейтер\n    dispatch(setUsers(data.items));//диспатчим экшен-крейтер\n    dispatch(setTotalUsersCount(data.totalCount));//диспатчим экшен-крейтер\n  }\n};\n\nconst _followUnfollowFlow = async (dispatch: DispatchType,\n  userId: number,\n  apiMethod: any,\n  actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType) => {\n  dispatch(toggleIsFollowingProgress(true, userId));\n  const data = await apiMethod(userId);\n  if (data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n  dispatch(toggleIsFollowingProgress(false, userId));\n};\n\nexport const follow = (userId: number): ThunkType => {//создатель санки\n  return async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\n  }\n};\nexport const unfollow = (userId: number): ThunkType => {//создатель санки\n  return async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n  }\n};\n\nexport default usersReducer;\n","import React from 'react';\r\nimport styles from './Paginator.module.css';\r\nimport { useState } from 'react';\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number // portionSize? - optional\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    const pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    const pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                onPageChanged(p);\r\n                            }}>{p}</span>\r\n           })}\r\n           { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { FC } from 'react';\r\nimport styles from './Users.module.css';\r\nimport userPhoto from '../../assets/images/photo.png'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return <div>\r\n        <div className={styles.userWrapper}>\r\n            <div className={styles.item}>\r\n                <NavLink to={'/profile/' + user.id}>\r\n                    <img src={user.photos.small !== null ? user.photos.small : userPhoto} className={styles.usersPhoto} alt=\"avatar\" />\r\n                </NavLink>\r\n            </div>\r\n            <div className={styles.item}>\r\n                {user.followed\r\n                    ? <button disabled={followingInProgress\r\n                        .some(id => id === user.id)}\r\n                            onClick={() => {unfollow(user.id);}}>Unfollow</button>\r\n                    : <button disabled={ followingInProgress\r\n                        .some(id => id===user.id) }\r\n                            onClick={() => { follow(user.id);}}>Follow</button>}\r\n            </div>\r\n            <div className={styles.item}>\r\n                <div>\r\n                    <div><b>{user.name}</b></div>\r\n                    <div>{user.status}</div>\r\n                </div>\r\n                <div>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default User;\r\n","import React, { FC } from 'react';\r\nimport Paginator from '../common/paginator/Paginator';\r\nimport User from './User';\r\nimport { UserType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst Users: FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalUsersCount={totalUsersCount} pageSize={pageSize} />\r\n        <div>\r\n            { users.map(u => <User user={u}\r\n                                        key={u.id}\r\n                                        followingInProgress={props.followingInProgress}\r\n                                        unfollow={props.unfollow}\r\n                                        follow={props.follow} />)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Users;\r\n","import { AppStateType } from './redux-store';\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { follow,\r\n    unfollow,\r\n    requestUsers\r\n} from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { getPageSize, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress, getUsers } from '../../redux/users-selectors';\r\nimport { UserType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {this.props.isFetching ? <Preloader /> : null }\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={ this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    unfollow={this.props.unfollow}\r\n                    follow={this.props.follow}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    //TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState\r\n    // withAuthRedirect,\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        requestUsers\r\n    }),\r\n)(UsersContainer);\r\n","import React from 'react';\r\nimport { reduxForm, InjectedFormProps } from 'redux-form'\r\nimport { Element, createField } from '../common/FormControls/FormControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { connect } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from './../common/FormControls/FormControls.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps>& LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n    const Input = Element('input')\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                {createField('login', 'email', [required], Input)}\r\n                {createField('password', 'password', [required], Input, {type: 'password'})}\r\n                {createField(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n                { captchaUrl && <img src={captchaUrl} /> }\r\n                { captchaUrl && createField('Simbols from image', 'captcha', [required], Input) }\r\n                {error && <div className={s.formSammaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({ form: 'contact' })(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        console.log(formData);\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'} />;\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","import { AppStateType } from './redux-store';\nimport { getAuthUserData } from \"./auth-reducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Dispatch } from 'react';\n\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\n\nexport type InitilStateType = {\n  initialized: boolean\n}\n\nlet initialState: InitilStateType = {\n  initialized: false\n};\n\nconst appReducer = (state = initialState, action: any) : InitilStateType => {\n  switch(action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        initialized: true\n      }\n    default:\n      return state;\n  }\n\n}\n\ntype DispatchType = Dispatch<ActionsTypes>\ntype ActionsTypes = InitializedSuccessActionType\n\ntype InitializedSuccessActionType = {\n  type: typeof INITIALIZED_SUCCESS\n}\nexport const initializedSuccess = () : InitializedSuccessActionType => ({ type: INITIALIZED_SUCCESS });\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\nexport const initializedApp = () => (dispatch: any) => {\n  let promise = dispatch(getAuthUserData());\n  Promise.all([promise]).then(() => dispatch(initializedSuccess()));\n}\n\nexport default appReducer;\n","let initialState =  {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleWare from \"redux-thunk\";// импортируем thunk под именем thunkMiddleWare\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from \"./app-reducer\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer,\n    form: formReducer\n});\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //crome redux-tools\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare))); //crome redux-tools\n\n// let store = createStore(reducers, applyMiddleware(thunkMiddleWare));//applyMiddleware- прими промежуточные слои\n// @ts-ignore\nwindow.__store__ = store;\n\nexport default store;\n","import React from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    \r\n\r\n    return props => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n                    <Component {...props} />\r\n                </React.Suspense>\r\n    };\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport { Route, withRouter, HashRouter, Redirect, Switch, BrowserRouter } from 'react-router-dom';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport LoginPage from './components/Login/Login';\r\nimport { connect, Provider } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { initializedApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport store from './redux/redux-store';\r\nimport { withSuspense } from './hoc/withSuspense';\r\nimport ReactPhoto from './assets/images/React-icon.png';\r\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\r\n// import ProfileContainer from './components/Profile/ProfileContainer';\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.initializedApp();\r\n  }\r\n\r\n  render() {\r\n    if(!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer />\r\n        <Navbar className='navBar' />\r\n        <div className='app-wrapper-content'>\r\n          <Switch>\r\n            <Route exact path='/' render={() => <Redirect to='/profile'/> }/>\r\n            <Route path='/dialogs' render={ withSuspense(DialogsContainer) }/>\r\n            <Route path='/profile/:userId?' render={ withSuspense(ProfileContainer) }/>\r\n            <Route path='/news' render={ () => <News /> }/>\r\n            <Route path='/music' render={ () => <Music /> }/>\r\n            <Route path='/settings' render={ () => <Settings /> }/>\r\n            <Route path='/users' render={() => <UsersContainer pageTitle={'Самураи'} />} />\r\n            <Route path='/login' render={() => <LoginPage />} />\r\n          </Switch>\r\n          <div className='way'>\r\n            <img src={ReactPhoto} alt=\"img\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\n// export default compose(\r\n//   withRouter,\r\n//   connect(mapStateToProps, {initializedApp}))(App);\r\n\r\nlet AppContainer = compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializedApp}))(App);\r\n\r\nconst MyJSApp = (props) => {\r\n  return <HashRouter>\r\n            <Provider store={store}>\r\n              <AppContainer />\r\n            </Provider>\r\n          </HashRouter>\r\n}\r\n\r\nexport default MyJSApp;\r\n","import * as serviceWorker from './serviceWorker';\n// import store from './redux/redux-store';\n// import { rerenderEntireTree } from './render';\n// import { BrowserRouter } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyJSApp from './App';\n// import App from './App';\n// import StoreContext from './storeContext';\n// import {Provider} from 'react-redux';\n\n\n\n\nReactDOM.render(<MyJSApp />, document.getElementById('root'));\n        \n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport preloader from './../../../assets/images/Spin.svg';\r\nimport styles from './Preloader.module.css';\r\n\r\nconst Preloader = (props) => {\r\n    return <img src={preloader} className={styles.preloader} alt='preloader'/>\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport { Field, WrappedFieldProps, WrappedFieldMetaProps } from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\n// export const Textarea = ({input, meta, ...props}) => {\r\n//   const hasError = meta.touched && meta.error;\r\n//   return (\r\n//     <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n//       <div>\r\n//         <textarea {...input} {...props} />\r\n//       </div>\r\n//     {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export const Input = ({input, meta, ...props}) => {\r\n//   const hasError = meta.touched && meta.error;\r\n//   return (\r\n//     <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n//       <div>\r\n//         <input {...input} {...props} />\r\n//       </div>\r\n//     {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   )\r\n// }\r\n\r\ntype ElementParamsType = {\r\n  input: string\r\n  meta: WrappedFieldMetaProps\r\n}\r\ntype ElementType = (params: ElementParamsType) => void\r\n\r\n//HOC\r\nexport const Element = (Element: any): React.FC<WrappedFieldProps> => ({input, meta, ...props}) => {\r\n  const {touched, error} = meta\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n      <div>\r\n        <Element {...input} {...props} />\r\n      </div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  )\r\n};\r\n// export const Element = (Element: React.FC<WrappedFieldProps>) => ({input, meta, ...props}) => {\r\n//   const {touched, error} = meta\r\n//   const hasError = touched && error;\r\n//   return (\r\n//     <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n//       <div>\r\n//         <Element {...input} {...props} />\r\n//       </div>\r\n//       {hasError && <span>{meta.error}</span>}\r\n//     </div>\r\n//   )\r\n// };\r\n\r\nexport const createField = (plaseholder: string | undefined,\r\n                            name: string,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '') => (\r\n  <div>\r\n    <Field placeholder={plaseholder} name={name} component={component} validate={validators} {...props}/> {text}\r\n  </div>\r\n)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__1j7BB\",\"cursorPointer\":\"Users_cursorPointer__1LPW4\",\"userWrapper\":\"Users_userWrapper__Rh9jJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__10fvL\",\"error\":\"FormControls_error__KmRjm\",\"formSammaryError\":\"FormControls_formSammaryError__hCrZs\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  return (value) ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if(value.length > maxLength) return `Max length is ${maxLength} simbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3ycK2\",\"pageNumber\":\"Paginator_pageNumber__2ONMm\",\"selectedPage\":\"Paginator_selectedPage__3BCtE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3YDhX\",\"loginBlock\":\"Header_loginBlock__2-Wcq\"};","import { PostType, ProfileType, PhotosType } from './../types/types';\nimport { usersAPI, profileAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\n\nlet initialState = {\n  \n  posts: [\n    // {id: 1, message: 'Hi! How are you?', likesCount: 15},\n    // {id: 2, message: 'I am fine!', likesCount: 25},\n    // {id: 3, message: 'Bla-bla!', likesCount: 12},\n    // {id: 4, message: 'Da-da!', likesCount: 27}\n  ] as Array<PostType>,\n  profile: null as ProfileType | null,\n  status: '',\n\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst profileReducer = (state = initialState, action: any):InitialStateType => {\n  switch(action.type) {\n    case ADD_POST: {\n      const newPost = {\n        id: 5,\n        message: action.newPostText,\n        likesCount: 0\n      }\n      return {\n        ...state,\n        posts: [...state.posts, newPost],\n      };\n    }\n    case SET_USER_PROFILE: {\n      return {\n        ...state,\n        profile: action.profile\n      };\n    }\n    case SET_STATUS: {\n      return {\n        ...state,\n        status: action.status\n      };\n    }\n    case DELETE_POST: {\n      return {\n        ...state,\n        posts: [...state.posts.filter(p => p.id !== action.postId)]\n      };\n    }\n    case SAVE_PHOTO_SUCCESS: {\n      return {\n        ...state,\n        profile: {...state.profile, photos: action.photos} as ProfileType\n      };\n    }\n    default:\n      return state;\n  }\n\n}\n//AC\ntype AddPostActionCreatorActionType = {\n  type: typeof ADD_POST\n  newPostText: string\n}\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorActionType => ({ type: ADD_POST, newPostText });\n\ntype SetUserProfileActionType = {\n  type: typeof SET_USER_PROFILE\n  profile: ProfileType\n}\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({ type: SET_USER_PROFILE, profile });\n\ntype SetStatusActionType = {\n  type: typeof SET_STATUS\n  status: string\n}\nexport const setStatus = (status: string): SetStatusActionType => ({ type: SET_STATUS, status });\n\ntype DeletePostACActionType = {\n  type: typeof DELETE_POST\n  postId: number\n}\nexport const deletePostAC = (postId: number): DeletePostACActionType => ({type: DELETE_POST, postId});\ntype SavePhotoSuccessActionType = {\n  type: typeof SAVE_PHOTO_SUCCESS\n  photos: PhotosType\n}\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => ({type: SAVE_PHOTO_SUCCESS, photos});\n\n//thunk\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\n  try {\n    const response = await usersAPI.getProfile(userId);\n    dispatch(setUserProfile(response.data));\n  } catch(error) {\n    return;\n  }\n};\nexport const getStatus = (userId: number) => async (dispatch: any) => {\n  try {\n    const response = await profileAPI.getStatus(userId);\n    dispatch(setStatus(response.data));\n  } catch(error) {\n    return;\n  }\n};\nexport const updateStatus = (status: string) => async (dispatch: any) => {\n  try {\n    const response = await profileAPI.updateStatus(status);\n    if(response.data.resultCode === 0) {\n      dispatch(setStatus(status));\n    }\n  } catch(error) {\n    return;\n  }\n};\nexport const savePhoto = (title: any) => async (dispatch: any) => {\n  const response = await profileAPI.savePhoto(title);\n  if(response.data.resultCode === 0) {\n    dispatch(savePhotoSuccess(response.data.data.photos));\n  }\n};\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\n  const userId = getState().auth.userId;\n  const response = await profileAPI.saveProfile(profile);\n  if(response.data.resultCode === 0) {\n    dispatch(getUserProfile(userId));\n  } else {\n    dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}));\n    return Promise.reject(response.data.messages[0]);\n  }\n};\n\n\n\nexport default profileReducer;\n"],"sourceRoot":""}